<!-- This file describes the first room. Normally I break each room into its
own self-contained file. This isn't fundamentally necessary, but it's very
natural. It also allows you to very easily load content only once a room 
is entered for the first time. -->
<sburb description="first room">

<dependencies>
	<dependency>chars/bux.xml</dependency> <!--load in bux first.-->
	<dependency>chars/meenah.xml</dependency> <!-- loading in everything meenah entails -->
	<dependency>chars/karkat.xml</dependency> <!-- and karkat -->
</dependencies>

<assets>
	
	<!-- The map is a special black-and-white image describing walkable areas in
	a room. White pixels are walkable, black are unwalkable. This actually consumes
	a very large amount of memory to use, so we keep the scaled down. I find 50%
	scale is a good compromise for performance/accuracy. However in sufficiently
	large rooms this is still too much, and 25% scale in necessary. This leads to
	a substantial sarcifice in hit-detection quality, so avoid big rooms!-->
  <asset name='secondRoomMap' type='graphic'>backgrounds/secondRoomMap.png</asset>
  <asset name='secondRoomBG'  type='graphic'>backgrounds/secondRoomBG.png</asset>
  <asset name='secondRoomFG'  type='graphic'>backgrounds/secondRoomFG.png</asset>
  
  <!-- an item to be found in a chest, nothing special about it-->
  <asset name='item1' type='graphic'>objects/items/item1.png</asset>
</assets>

<!-- We create the sprite for this item outside of everything else
because by default it isn't anywhere at all. We just want to be able to
access it at some point in the future. This is a very common pattern. We
do this for anything that will "eventually" be added to a room.

Note: depthing='2' puts this in front of everything, including foreground elements! -->
<sprite name='item1' depthing='3'>
	<animation sheet='item1' x='-30' y='-30'/>
</sprite>

<!-- We wrap all room tags in the rooms tag. This is mostly useless since it's
not good practice to keep multiple rooms in one file, but hey, better
safe than sorry.-->
<rooms>
	<!-- Here we describe our room, note that here we are using the "map" we 
	loaded in earlier. Also note the scale variable specifying how much this map
	should be scaled up for it to reflect the actual room size. We also derive
	the dimensions of the room from this, which is used to specify the area the
	camera can see. However width and height can be explicitly
	specified here if need be. The walkableMap is theoretically optional, but
	it's incredibly useful and easy to use. -->
  <room name='secondRoom' walkableMap='secondRoomMap' scale='4'>
  
  	<!-- here we drop in our character. Since we specified everything in 
  	chars/meenah.xml, we don't have to do much here. We just need to specify
  	her location. Note that class='meenah' will fill in all the values we
  	didn't specify using the class in chars/meenah.xml, including any
  	internal tags that may have been part of the class. Template classes
  	are a great way to seperate logic and content, as well as recycle common
  	patterns. -->
  
  	<character class='karkat' x='420' y='500'>
  		<action class='beKarkat'/>
  		<action command='talk' name='Talk.'>
  			<args>
  				@bux_talk This is a test. And a sample 
  				@karkat_talk what
  				@bux_confusedtalk Who are you?
				@meenah_talk get the fuck out of my sample
				@bux_zoneout
  			</args>
  		</action>
  	</character>
 
  	<!-- here we're adding a standard chest based on a template class found in
  	etc/standardTemplates.xml -->
  	<sprite class='chest1' name='chest1' x='166' y='498'>
			<action command='openChest' sprite='bux' name='Open.'>
				<args>
					chest1,item1, @! You got a CAN OF TAB!
					@! You have no idea what this is
				</args>
			</action>
			<action command='openChest' sprite='karkat' name='Open.'>
				<args>
					chest1,item1, @! You got a CAN OF TAB!
				</args>
			</action>
		</sprite>
   
   <!-- here we're adding in our BG and FG. This is the second half of our 
   optimization. To avoid creating a dozen sprites for every single tile, we
   specify that this image has been sliced up into tiles. Then we just specify
   how many there are and how big they are, and the system will find all of them
   and tile them correctly based on their names. This also makes it very easy
   to transition from using one big image to a sliced up one. -->
   
   <!-- Note no depthing specification puts a sprite in the background. Not 
   specifying coordinates also puts them at (0,0) by default (top-left corner). -->
    <sprite name='secondRoomBG'>
    	<animation sheet='secondRoomBG' sliced='false'/>
    </sprite>

		<!-- note depthing='2' is what puts this in the foreground -->
		<sprite name='secondRoomFG' depthing='2'>
    	<animation sheet='secondRoomFG' sliced='false'/>
    </sprite>
  </room>
</rooms>
</sburb>
